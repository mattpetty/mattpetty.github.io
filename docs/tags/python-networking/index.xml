<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python, networking on Packets &amp; Python: Matt&#39;s Networking Blog</title>
    <link>https://mattpetty.github.io/tags/python-networking/</link>
    <description>Recent content in python, networking on Packets &amp; Python: Matt&#39;s Networking Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Aug 2022 22:30:30 -0400</lastBuildDate><atom:link href="https://mattpetty.github.io/tags/python-networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python&#39;s ipaddress Module</title>
      <link>https://mattpetty.github.io/2022/08/09/pythons-ipaddress-module/</link>
      <pubDate>Tue, 09 Aug 2022 22:30:30 -0400</pubDate>
      
      <guid>https://mattpetty.github.io/2022/08/09/pythons-ipaddress-module/</guid>
      <description>Introduction üìù (Note: some familiarity with Python is assumed for this article)
Since version 3.3 (released September 2012), Python has included an ipaddress module as part of its standard library (that is, it&amp;rsquo;s included as part of any default Python 3.3+ installation). For a network engineer, this can be a remarkably useful and easy way to work with IP addresses and subnets in Python.
The official documentation is here, but read on for a basic summary of this module and some helpful uses for it.</description>
    </item>
    
  </channel>
</rss>
