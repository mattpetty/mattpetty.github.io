<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Matt&#39;s Networking Blog</title>
    <link>https://mattpetty.github.io/tags/python/</link>
    <description>Recent content in python on Matt&#39;s Networking Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Jun 2022 21:59:23 -0400</lastBuildDate><atom:link href="https://mattpetty.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python&#39;s ipaddress Module</title>
      <link>https://mattpetty.github.io/2022/06/18/pythons-ipaddress-module/</link>
      <pubDate>Sat, 18 Jun 2022 21:59:23 -0400</pubDate>
      
      <guid>https://mattpetty.github.io/2022/06/18/pythons-ipaddress-module/</guid>
      <description>Introduction Note: some familiarity and experience with Python is assumed for this article
Since version 3.3 (released September 2012), Python has included an ipaddress module as part of its standard library (that is, it&amp;rsquo;s included as part of any default Python 3.3+ installation). For a network engineer, this can be a remarkably useful and easy way to work with IP addresses and subnets in Python.
Importing Since ipaddress is part of the standard library, to utilize it, it&amp;rsquo;s as simple as starting a new Python script (or REPL) and doing:</description>
    </item>
    
  </channel>
</rss>
