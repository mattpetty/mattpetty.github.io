<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Packets &amp; Python: Matt&#39;s Networking Blog</title>
        <link>https://mattpetty.github.io/posts/</link>
        <description>Recent content in Posts on Packets &amp; Python: Matt&#39;s Networking Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 18 Dec 2022 23:42:00 -0500</lastBuildDate>
        <atom:link href="https://mattpetty.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Let&#39;s Encrypt SSL Certificates for Proxmox VE Using Linode DNS</title>
            <link>https://mattpetty.github.io/2022/12/18/lets-encrypt-ssl-certificates-for-proxmox-ve-using-linode-dns/</link>
            <pubDate>Sun, 18 Dec 2022 23:42:00 -0500</pubDate>
            
            <guid>https://mattpetty.github.io/2022/12/18/lets-encrypt-ssl-certificates-for-proxmox-ve-using-linode-dns/</guid>
            <description>If you&amp;rsquo;re a fan of Proxmox Virtualization Environment (PVE) like I am, you&amp;rsquo;ll also likely be a fan of the fact that your Proxmox VE server(s) can utilize a free service called Let&amp;rsquo;s Encrypt to acquire a valid SSL certificate.
Let&amp;rsquo;s Encrypt works by first making you verify ownership of a domain or server, typically using either an HTTP connection to the server, or through a specific DNS record lookup. Once you&amp;rsquo;ve proven ownership, a certificate is automatically generated and downloaded (and optionally auto-installed on the server) to provide a &amp;ldquo;valid&amp;rdquo; TLS connection between your web browser and the server.</description>
            <content type="html"><![CDATA[<p>If you&rsquo;re a fan of <strong>Proxmox Virtualization Environment</strong> (PVE) like I am, you&rsquo;ll also likely be a fan of the fact that your Proxmox VE server(s) can utilize a <strong>free</strong> service called <strong><a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a></strong> to acquire a valid SSL certificate.</p>
<p>Let&rsquo;s Encrypt works by first making you verify ownership of a domain or server, typically using either an HTTP connection to the server, or through a specific DNS record lookup. Once you&rsquo;ve proven ownership, a certificate is automatically generated and downloaded (and optionally auto-installed on the server) to provide a &ldquo;valid&rdquo; TLS connection between your web browser and the server.</p>
<p>This is much preferable to the default self-signed certificates that come installed &ldquo;out-of-the-box,&rdquo; generating security warnings and generally making it slightly less pleasant to administer your Proxmox box.</p>
<p>In this example, since I&rsquo;m a fan of <strong><a href="https://linode.com">Linode</a></strong> and their hosting services, and because their DNS API <a href="https://community.letsencrypt.org/t/dns-providers-who-easily-integrate-with-lets-encrypt-dns-validation/86438">is supported</a> for Let&rsquo;s Encrypt DNS challenges, I&rsquo;ll be using Linode DNS for the validation process.</p>
<h3 id="creating-a-linode-api-token">Creating a Linode API Token</h3>
<p>Begin by creating an <strong>API Token</strong> in your Linode account that has permissions to create and delete DNS records.</p>
<ol>
<li>Log into <strong>Linode</strong> in your web browser</li>
<li>Click your <strong>Profile</strong> avatar in upper right -&gt; Click <strong>API Tokens</strong></li>
</ol>
<p><img src="images/01.png" alt="API Tokens">
<br>
3. Click <strong>Create Personal Access Token</strong>
<br>
4. Create a <strong>Label</strong> (name) and set an <strong>Expiry Date</strong> (if desired)
<br>
5. Since this token is only for <strong>DNS</strong> (aka Domains), set all categories to <em>None</em>, and change <strong>Domains</strong> to <em>Read/Write</em></p>
<p><img src="images/02.png" alt="Token Permissions"></p>
<blockquote>
<p>üìù Depending on your domain and use-case, it&rsquo;s highly advisable to set the <em>Default TTL</em> for your Linode DNS records to something very low (ideally 30 seconds, or 2 minutes), at least while you&rsquo;re setting up Let&rsquo;s Encrypt. Setting the TTL lower helps prevent the ephemeral DNS records used for the DNS challenge from being cached for long periods of time, which can be problematic if a validation fails and you need to try again.</p>
</blockquote>
<h3 id="configuring-proxmox-pve-for-acme--lets-encrypt">Configuring Proxmox PVE for ACME / Let&rsquo;s Encrypt</h3>
<p>Once you&rsquo;ve created a <strong>Linode API Token</strong> (and saved it or wrote it down&hellip; <em>right?</em>), log into your <strong>Proxmox VE</strong> server&rsquo;s web GUI.</p>
<p>From the left-hand menu, navigate to <strong>Datacenter</strong> -&gt; <strong>ACME</strong>.</p>
<p>Under the <strong>Accounts</strong> section, click <strong>Add</strong>.</p>
<ol>
<li>Create an account for <em>Let&rsquo;s Encrypt Staging</em> by creating a descriptive account name and providing your email address.</li>
<li>From the <strong>ACME Directory</strong> drop-down menu, select <strong>Let&rsquo;s Encrypt V2 Staging</strong>.</li>
<li>Click the box to <strong>Accept TOS</strong> (Terms of Service)</li>
<li>Click <strong>Register</strong></li>
<li>Repeat steps 1-4 again, but this time select <strong>Let&rsquo;s Encrypt V2</strong> from the <strong>ACME Directory</strong> drop-down menu.</li>
</ol>
<p><img src="images/03.png" alt="Add Staging Account"></p>
<p><img src="images/04.png" alt="Add Account"></p>
<blockquote>
<p>üìù I strongly suggest creating accounts for both Staging and Non-Staging versions of Let&rsquo;s Encrypt. Using the <em>Staging</em> version allows you to test the setup without the risk of getting temporarily rate-limited by Let&rsquo;s Encrypt for too many failures in a row. Staging certificates follow the same process as the real certificates, but their root CA is <em>untrusted</em> by default in all browsers. Once you get the process working in Staging, switching over to the real Let&rsquo;s Encrypt environment will get you <em>trusted</em> certificates.</p>
</blockquote>
<p>Under the <strong>Challenge Plugins</strong> section, click <strong>Add</strong>.</p>
<ol>
<li>Create a memorable name, such as <em>Linode-DNS-API</em></li>
<li>Change <strong>Validation Delay</strong> from <em>30 seconds</em> to (at least) <em>60 seconds</em></li>
<li>From the <strong>DNI API</strong> drop-down menu, choose <em>linode_v4</em></li>
<li>In the box labeled <strong>API Data</strong>, enter your Linode API Token in the following form:
LINODE_V4_API_KEY=<em>your-api-key-goes-here</em></li>
</ol>
<blockquote>
<p>üìù When entering your Linode API token, make sure not to input any quotes or extraneous whitespace.</p>
</blockquote>
<p><img src="images/05.png" alt="Create DNS Plugin"></p>
<blockquote>
<p>üìù When configuring the DNS plugin, be sure to increase the validation delay from the default 30 seconds. I recommend at least 60 seconds, as Linode&rsquo;s DNS record creation takes significantly longer than 30 seconds. If the validation delay isn&rsquo;t sufficiently long enough to allow for the DNS record&rsquo;s successful creation, the Let&rsquo;s Encrypt DNS validation will never complete successfully.</p>
</blockquote>
<h3 id="acquiring-ssl-certificates-from-lets-encrypt">Acquiring SSL Certificates from Let&rsquo;s Encrypt</h3>
<p>Lastly, back at the left-side Proxmox VE menu, select the <em>PVE node</em> that needs an SSL certificate (underneath <strong>Datacenter</strong>).</p>
<ol>
<li>Click on <strong>System</strong> -&gt; <strong>Certificates</strong></li>
<li>Under the <strong>ACME</strong> section, click <strong>Using Account:</strong>, select your <em>Staging</em> account and click <strong>Apply</strong>.</li>
</ol>
<p><img src="images/06.png" alt="ACME Account">
<br>
3. Click thd <strong>Add</strong> button and change <strong>Challenge Type</strong> to <em>DNS</em>
<br>
4. At the <strong>Plugin:</strong> drop-down menu, select the Linode DNS plugin you created above.</p>
<p><img src="images/07.png" alt="Generate Certificate">
<br>
5. In <strong>Domain:</strong> enter the <strong>hostname</strong> and <strong>domain name</strong> (aka FQDN) you&rsquo;re acquiring a certificate for, then click <strong>Create</strong>.
<br>
6. Once you&rsquo;ve added the new <strong>ACME</strong> entry, click <strong>Order Certificates Now</strong> to run the Let&rsquo;s Encrypt validation challenge.</p>
<p>Assuming everything is set up correctly, you should be able to watch your PVE server run through a DNS challenge, with the temporary TXT verification records being created and deleted automatically through the Linode API. Once complete, your Proxmox VE server will automatically install the new certificate and restart the web GUI.</p>
<blockquote>
<p>üìù If the DNS challenge process fails, the first culprit is likely going to be the <em>validation delay</em>. If you&rsquo;ve already set the validation delay to 60 seconds, try increasing it even higher to 90 seconds, 120 seconds, or even more. This should allow for plenty of time for the DNS TXT record(s) to be created and reachable globally.</p>
</blockquote>
<blockquote>
<p>üìù Additionally, when logged into <a href="https://linode.com">Linode</a>, watch the notifications section in the GUI, which will report to you in real-time when the DNS TXT records are created or deleted. If you aren&rsquo;t seeing any activity for DNS changes in your Linode account when your PVE node is running the Let&rsquo;s Encrypt process, verify that you entered the Linode API key correctly as outlined under <strong>Challenge Plugins</strong> above, and ensure you&rsquo;re using the <strong>Linode_V4</strong> API (which is the most current version as of the writing of this blog post).</p>
</blockquote>
<p>If you used the <em>Let&rsquo;s Encrypt V2 Staging</em> account for the first attempt, you&rsquo;ll still be seeing an <strong>invalid</strong> SSL certificate error in your browser at this point. Wait a few minutes (you remembered to set the default TTL to a sufficiently low value&hellip; <em>right?</em>), then run through the above <strong>steps 1-6</strong> again but change the <strong>Account</strong> to the <em>non-Staging</em> version.</p>
<p>Once the validation process completes for the <strong>real</strong> Let&rsquo;s Encrypt validation environment and the GUI restarts again, you should be seeing a <em>valid</em> (trusted) SSL certificate on your Proxmox VE now (you may need to close/reopen the browser window). And conveniently, the renewal process will happen automatically every 90 days to avoid the certificate expiring.</p>
<p>Enjoy!</p>
<p><img src="images/08.jpg" alt="SSL Certificates Everywhere!"></p>
]]></content>
        </item>
        
        <item>
            <title>NAT Control on the Cisco ASA</title>
            <link>https://mattpetty.github.io/2022/11/07/nat-control-on-the-cisco-asa/</link>
            <pubDate>Mon, 07 Nov 2022 13:46:18 -0500</pubDate>
            
            <guid>https://mattpetty.github.io/2022/11/07/nat-control-on-the-cisco-asa/</guid>
            <description>Introduction The history of NAT (network address translation) behaviors on Cisco&amp;rsquo;s ASA firewalls has certainly&amp;hellip; evolved over the years. In a future blog post, I&amp;rsquo;ll be covering the basics of specific NAT types and how they&amp;rsquo;ve changed over different code versions, but today I want to take a quick overview of default NAT behavior on Cisco‚Äôs firewalls and its evolution.
NAT Control Enter NAT Control, which over the course of its lifespan went from being a required default, to an optional feature, to ultimately being retired and disabled altogether.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The history of <strong>NAT</strong> (<a href="https://en.wikipedia.org/wiki/Network_address_translation">network address translation</a>) behaviors on Cisco&rsquo;s ASA firewalls has certainly&hellip; <em>evolved</em> over the years. In a future blog post, I&rsquo;ll be covering the basics of specific NAT types and how they&rsquo;ve changed over different code versions, but today I want to take a quick overview of <em>default</em> NAT behavior on Cisco‚Äôs firewalls and its evolution.</p>
<h2 id="nat-control">NAT Control</h2>
<p>Enter <strong>NAT Control</strong>, which over the course of its lifespan went from being a required default, to an optional feature, to ultimately being retired and disabled altogether. Not every firewall engineer may know about the (probably Cisco-specific) concept of NAT control, but like every major change to NAT behavior, it can have a significant effect not just on how traffic flows through the firewall, but also on your mental model of how you might expect a firewall to function.</p>
<h2 id="origin">Origin</h2>
<p>So, what is NAT control, exactly? Beginning with the predecessor to the Cisco ASA, Cisco&rsquo;s <strong><a href="https://en.wikipedia.org/wiki/Cisco_PIX">PIX</a></strong> firewall <em>required NAT</em> (or a <em>NAT exemption</em>) for <em>all</em> traffic passing between any two firewall interfaces, up through the maximum PIX OS version <em>6.3</em>.</p>
<p>What this means is that basically an IP packet couldn&rsquo;t pass through the firewall untouched unless a specific NAT exemption was created (essentially, a rule saying ‚Äúdon‚Äôt NAT this specific traffic‚Äù).</p>
<p><img src="images/01.jpg" alt="One Does Not Simply Pass Through NAT Control"></p>
<h2 id="evolution">Evolution</h2>
<p>With the introduction of the <a href="https://en.wikipedia.org/wiki/Cisco_ASA">Cisco ASA</a> in mid-2005, Cisco converted both the PIX and ASA firewalls to the newer <em>ASA codebase</em> starting with version <em>7.0(1)</em>. In that version, the <strong>nat-control</strong> feature became available so that the previous default PIX NAT behavior could be enabled or disabled, which is as simple as issuing the commands <em>&ldquo;nat-control&rdquo;</em> or <em>&ldquo;no nat-control&rdquo;</em>.</p>
<p>Once <em>disabled</em>, there doesn&rsquo;t need to be any NAT configuration in place for traffic to pass between the firewall&rsquo;s interfaces, as long as existing access-lists, security-levels, and routing entries permit that traffic to do so. Granted, if you&rsquo;re considering the common scenario of an internet-edge facing firewall that NATs <a href="https://en.wikipedia.org/wiki/Private_network">private IPv4 space</a> to one or more public IPv4 addresses, you&rsquo;ll still need to NAT anyway (or move to <a href="https://en.wikipedia.org/wiki/IPv6">IPv6</a> already!).</p>
<h2 id="displacement">Displacement</h2>
<p>By the time Cisco did the massive NAT reboot of the ASA 8.3 code train around mid-2010, <strong>nat-control</strong> was no more. Release version <em>8.3(1)</em> marked the end of the availability of the <strong>nat-control</strong> feature, no longer even available as a configurable option.</p>
<p>Nowadays, if no NAT rules have been put in place, packets can traverse Cisco firewalls with their source and destination IP addresses blissfully unchanged (and besides, who wouldn&rsquo;t like to save a few CPU cycles on their firewall if we can get away with it?).</p>
<p><img src="images/02.jpg" alt="These Aren&amp;rsquo;t the Packets You Need to NAT"></p>
]]></content>
        </item>
        
        <item>
            <title>Python&#39;s ipaddress Module</title>
            <link>https://mattpetty.github.io/2022/08/09/pythons-ipaddress-module/</link>
            <pubDate>Tue, 09 Aug 2022 22:30:30 -0400</pubDate>
            
            <guid>https://mattpetty.github.io/2022/08/09/pythons-ipaddress-module/</guid>
            <description>Introduction üìù (Note: some familiarity with Python is assumed for this article)
Since version 3.3 (released September 2012), Python has included an ipaddress module as part of its standard library (that is, it&amp;rsquo;s included as part of any default Python 3.3+ installation). For a network engineer, this can be a remarkably useful and easy way to work with IP addresses and subnets in Python.
The official documentation is here, but read on for a basic summary of this module and some helpful uses for it.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<blockquote>
<p>üìù (Note: some <a href="https://mattpetty.github.io/2022/07/16/beginner-python-examples/">familiarity</a> with Python is assumed for this article)</p>
</blockquote>
<p>Since version 3.3 (released September 2012), Python has included an <strong>ipaddress</strong> module as part of its standard library (that is, it&rsquo;s included as part of any default Python 3.3+ installation). For a network engineer, this can be a remarkably useful and easy way to work with IP addresses and subnets in Python.</p>
<p>The official documentation is <a href="https://docs.python.org/3/library/ipaddress.html">here</a>, but read on for a basic summary of this module and some helpful uses for it.</p>
<h2 id="importing">Importing</h2>
<p>Since <strong>ipaddress</strong> is part of the standard library, to utilize it, it&rsquo;s as simple as starting a new Python script (or REPL) and doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> ipaddress
</span></span></code></pre></div><p>Once imported, this gives you access to a number of different classes that can (for example) test whether a given address falls within a given subnet, or if an IP address is valid IPv4.</p>
<h2 id="so-how-do-i-use-it">So, how do I use it?</h2>
<p>Sticking with <strong>IPv4</strong> for now, let&rsquo;s review the three major &ldquo;classes&rdquo; you&rsquo;ll likely work with using <strong>ipaddress</strong>. Those three are:</p>
<ul>
<li><em>IPv4Address</em></li>
<li><em>IPv4Network</em></li>
<li><em>IPv4Interface</em></li>
</ul>
<h3 id="ipv4address">IPv4Address</h3>
<p>The first, <em>IPv4Address</em>, is fairly self-explanatory, and accepts only individual IP addresses (no subnet/CIDR masks):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> ipaddress
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.9&#39;</span>)
</span></span></code></pre></div><p>So what good does this do?</p>
<p>First, it allows you to use addition and subtraction to easily increase or decrease the IP address object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.9&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.10&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.1&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">33</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.42&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">289</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.3.42&#39;</span>)
</span></span></code></pre></div><p>For another use case, imagine you have a list of data, possibly a list of hostnames and IP addresses, or a list of IP address data of unknown validity. If you want to quickly filter this data out to just valid IP addresses, you can do something as simple as the following example (conveniently, you can get the &ldquo;plain-text&rdquo; representation of any <strong>ipaddress</strong> object by calling the <em>str()</em> function on it):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sus_ip_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;100.111.222.3&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;dns.google&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;8.8.8.8&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;172.16.1.1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;192.0.2.42&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;198.51.100.42&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;203.0.113.42&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;would you like a toasted tea-cake?&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>valid_ip_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> maybe_ip <span style="color:#f92672">in</span> sus_ip_list:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    valid_ip <span style="color:#f92672">=</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(maybe_ip)
</span></span><span style="display:flex;"><span>    valid_ip_list<span style="color:#f92672">.</span>append(str(valid_ip))
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">except</span> ipaddress<span style="color:#f92672">.</span>AddressValueError:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Error: &#34;</span><span style="color:#e6db74">{</span>maybe_ip<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34; is not a valid host IPv4 address&#39;</span>)
</span></span></code></pre></div><p>Running the above code produces the following result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Error: <span style="color:#e6db74">&#34;dns.google&#34;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> a valid host IPv4 address
</span></span><span style="display:flex;"><span>Error: <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> a valid host IPv4 address
</span></span><span style="display:flex;"><span>Error: <span style="color:#e6db74">&#34;would you like a toasted tea-cake?&#34;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> a valid host IPv4 address
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> valid_ip_list
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;100.111.222.3&#39;</span>, <span style="color:#e6db74">&#39;8.8.8.8&#39;</span>, <span style="color:#e6db74">&#39;172.16.1.1&#39;</span>, <span style="color:#e6db74">&#39;192.0.2.42&#39;</span>, <span style="color:#e6db74">&#39;198.51.100.42&#39;</span>, <span style="color:#e6db74">&#39;203.0.113.42&#39;</span>]
</span></span></code></pre></div><p>Additionally, there are some properties that allow you to determine what sort of IPv4 address you&rsquo;re dealing with - public, private, multicast, loopback, etc.; or format it as a reverse pointer (PTR) DNS record:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;8.8.8.8&#34;</span>)<span style="color:#f92672">.</span>is_global
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;172.16.1.1&#34;</span>)<span style="color:#f92672">.</span>is_global
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;172.16.1.1&#34;</span>)<span style="color:#f92672">.</span>is_private
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;127.0.0.1&#34;</span>)<span style="color:#f92672">.</span>is_loopback
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;172.16.1.1&#34;</span>)<span style="color:#f92672">.</span>reverse_pointer
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;1.1.16.172.in-addr.arpa&#39;</span>
</span></span></code></pre></div><h3 id="ipv4network">IPv4Network</h3>
<p>The next class, <em>IPv4Network</em>, differs from <em>IPv4Address</em> in that it requires a <em>subnet</em> (in CIDR form) as the input value, as opposed to a single IP address. This means that for the given subnet mask you&rsquo;re passing to <em>IPv4Network</em>, the corresponding IP address must be a network address (i.e. lowest of the subnet).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Network(<span style="color:#e6db74">&#39;192.0.2.0/24&#39;</span>)
</span></span></code></pre></div><p>Try to pass a subnet address that isn&rsquo;t the network address, and an exception will be raised:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.1/24&#34;</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;/usr/lib/python3.7/ipaddress.py&#34;</span>, line <span style="color:#ae81ff">1536</span>, <span style="color:#f92672">in</span> __init__
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> has host bits set&#39;</span> <span style="color:#f92672">%</span> self)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ValueError</span>: <span style="color:#ae81ff">192.0.2.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span> has host bits set
</span></span></code></pre></div><p>The <em>IPv4Network</em> class has all the same attributes and properties of the <em>IPv4Address</em> class, as well as a few more, to get information like the subnet&rsquo;s broadcast address, long-form subnet mask, host (wildcard) mask, etc. (refer to the official docs for more; these are just a few examples):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>network_address
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.0&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>broadcast_address
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.255&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>netmask
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;255.255.255.0&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>hostmask
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;0.0.0.255&#39;</span>)
</span></span></code></pre></div><p>(notice that many of the returned addresses are actually IPv4Address objects!)</p>
<p>Also, using <em>IPv4Address</em> and <em>IPv4Network</em> objects together enables the ability to quickly determine if a given address is part of a given subnet using the <strong>&ldquo;in&rdquo;</strong> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.42&#34;</span>) <span style="color:#f92672">in</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;10.86.75.39&#34;</span>) <span style="color:#f92672">in</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;10.0.0.0/8&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;8.8.8.8&#34;</span>) <span style="color:#f92672">in</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;172.16.0.0/16&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">False</span>
</span></span></code></pre></div><h3 id="ipv4interface">IPv4Interface</h3>
<p>This brings us to the <em>IPv4Interface</em> class. Think of this almost like a combination of <em>IPv4Address</em> and <em>IPv4Network</em>; it takes both a host IP address <em>and</em> a CIDR mask, a syntax which is frequently seen on <em>network device interfaces</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Interface(<span style="color:#e6db74">&#34;192.168.42.10/24&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Interface(<span style="color:#e6db74">&#39;192.168.42.10/24&#39;</span>)
</span></span></code></pre></div><p>This could also be used to describe both a <em>host</em> on a network and its <em>subnet mask</em> with a single object.</p>
<p>Consider the following example: with a standard of using the first usable address in a subnet as the default gateway, all the typically relevant IP-related data (host address, subnet mask, default gateway) could be deduced from a <em>single</em> <strong>IPv4Interface</strong> object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_host <span style="color:#f92672">=</span> ipaddress<span style="color:#f92672">.</span>IPv4Interface(<span style="color:#e6db74">&#34;172.16.99.42/24&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>host_ip_address <span style="color:#f92672">=</span> my_host<span style="color:#f92672">.</span>ip
</span></span><span style="display:flex;"><span>host_subnet_mask <span style="color:#f92672">=</span> my_host<span style="color:#f92672">.</span>netmask
</span></span><span style="display:flex;"><span>host_gateway <span style="color:#f92672">=</span> my_host<span style="color:#f92672">.</span>network<span style="color:#f92672">.</span>network_address <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Printing the output from the example above produces the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... IP Address:  </span><span style="color:#e6db74">{</span>host_ip_address<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... Subnet Mask: </span><span style="color:#e6db74">{</span>host_subnet_mask<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... Gateway:     </span><span style="color:#e6db74">{</span>host_gateway<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... &#34;&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IP Address:  <span style="color:#ae81ff">172.16.99.42</span>
</span></span><span style="display:flex;"><span>Subnet Mask: <span style="color:#ae81ff">255.255.255.0</span>
</span></span><span style="display:flex;"><span>Gateway:     <span style="color:#ae81ff">172.16.99.1</span>
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<p>I hope these examples have shed some light on how Python&rsquo;s <strong>ipaddress</strong> module can be a useful tool any time you need to analyze, process, or generate IP addressing-related data. It&rsquo;s well-documented and readily available as part of the standard library, making it an easy choice to add to your Python networking toolkit.</p>
]]></content>
        </item>
        
        <item>
            <title>Beginner Python Examples for Network Engineers: Part 1</title>
            <link>https://mattpetty.github.io/2022/07/16/beginner-python-examples-for-network-engineers-part-1/</link>
            <pubDate>Sat, 16 Jul 2022 22:30:12 -0400</pubDate>
            
            <guid>https://mattpetty.github.io/2022/07/16/beginner-python-examples-for-network-engineers-part-1/</guid>
            <description>Introduction For anyone new to Python, or looking for a quick refresher on the basics, consider this article an overview of various ways to get started reading, modifying, and working with data in Python. Naturally, given the nature of this blog, this post will take a Network Engineering-centric approach in the examples.
Examples For these first two examples, let&amp;rsquo;s imagine some data, such as a list of MAC addresses. In Python, a group of items is called a List (there are also multiple other groupings in Python, but that&amp;rsquo;s a subject for another blog post).</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>For anyone new to Python, or looking for a quick refresher on the basics, consider this article an overview of various ways to get started reading, modifying, and working with data in Python. Naturally, given the nature of this blog, this post will take a Network Engineering-centric approach in the examples.</p>
<h2 id="examples">Examples</h2>
<p>For these first two examples, let&rsquo;s imagine some data, such as a list of MAC addresses. In Python, a <em>group of items</em> is called a <strong>List</strong> (there are also multiple other groupings in Python, but that&rsquo;s a subject for another blog post). For this particular list of MAC addresses, I&rsquo;ll use a list of <em>strings</em>, which you can think of as another word for &ldquo;text.&rdquo; Lists are represented via square brackets <strong>[]</strong>, with each item separated by commas, and strings are enclosed in quotes <strong>&quot;&quot;</strong> (single or double, your choice):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> known_mac_addresses <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;00-11-22-33-44-55&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01-23-45-67-89-0A&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;AA-BB-CC-DD-EE-FF&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;36-56-9A-B4-0E-ED&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01-EF-AF-BC-DD-23&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;86-75-30-98-67-53&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;AB-CD-EF-01-23-45&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;89-46-C3-69-D8-D4&#34;</span>,
</span></span><span style="display:flex;"><span>    ]
</span></span></code></pre></div><blockquote>
<p>üìù If you stare at the list above long enough, you may notice that the last item of the list ends with a comma, even though there isn&rsquo;t another item that comes after it. This is a matter of personal preference, but trailing commas are optional in Python lists (as the above example illustrates, I prefer them myself for readability, and for ease of any future additions to the list, but also mainly because that&rsquo;s what the <em><a href="https://github.com/psf/black">Black</a></em> code formatter does, along with double-quotes for strings).</p>
</blockquote>
<p>Now that some data has been established, let&rsquo;s look at some examples of what we can do with it.</p>
<h3 id="example-1---find-a-single-item">Example 1 - Find a Single Item</h3>
<p>One of the nicest things about Python is its simple syntax, which can often closely resemble natural language or pseudocode in the sense that it&rsquo;s very easy to read and understand. In particular, it becomes extremely easy to check for the existence of a specific <em>string of text</em> inside a larger string (or a <em>list</em> of strings, in this example) simply by using the <strong>&ldquo;in&rdquo;</strong> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>known_mac_addresses <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;00-11-22-33-44-55&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;01-23-45-67-89-0A&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AA-BB-CC-DD-EE-FF&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;36-56-9A-B4-0E-ED&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;01-EF-AF-BC-DD-23&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;86-75-30-98-67-53&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AB-CD-EF-01-23-45&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;89-46-C3-69-D8-D4&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mac_to_find <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;86-75-30-98-67-53&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> mac_to_find <span style="color:#f92672">in</span> known_mac_addresses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Found </span><span style="color:#e6db74">{</span>mac_to_find<span style="color:#e6db74">}</span><span style="color:#e6db74"> in list of known MAC addresses!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;* Could not find </span><span style="color:#e6db74">{</span>mac_to_find<span style="color:#e6db74">}</span><span style="color:#e6db74"> in list of known MAC addresses.&#34;</span>)
</span></span></code></pre></div><p>The code above shows a way of specifying an exact match for a given string within a list of strings. Let&rsquo;s focus just on that <strong>if</strong> statement:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> mac_to_find <span style="color:#f92672">in</span> known_mac_addresses:
</span></span></code></pre></div><p>The code can be read pretty much literally; it&rsquo;s checking for the presence of something specific <em>within</em> a larger string (such as a block of text).</p>
<p>Running the above code should produce something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">...</span> 
</span></span><span style="display:flex;"><span>Found <span style="color:#ae81ff">86</span><span style="color:#f92672">-</span><span style="color:#ae81ff">75</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#f92672">-</span><span style="color:#ae81ff">98</span><span style="color:#f92672">-</span><span style="color:#ae81ff">67</span><span style="color:#f92672">-</span><span style="color:#ae81ff">53</span> <span style="color:#f92672">in</span> list of known MAC addresses<span style="color:#960050;background-color:#1e0010">!</span>
</span></span></code></pre></div><p>Without having had to write any sort of regular expression or come up with a kludgy method of string matching, this ability is built right in to Python using the <strong>in</strong> keyword.</p>
<h3 id="example-2---multiple-items-looping">Example 2 - Multiple Items (Looping)</h3>
<p>Finding a <em>single</em> string in a list of strings is great, but what if we have <em>more than one</em> string that we want to match? With Python, we can use <strong>for</strong> loops to easily compare multiple values against each other. A <strong>for</strong> loop simply iterates over every item in a list (or any similar group of items in Python).</p>
<p>Consider the following example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>known_mac_addresses <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;00-11-22-33-44-55&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;01-23-45-67-89-0A&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AA-BB-CC-DD-EE-FF&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;36-56-9A-B4-0E-ED&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;01-EF-AF-BC-DD-23&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;86-75-30-98-67-53&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AB-CD-EF-01-23-45&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;89-46-C3-69-D8-D4&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>maclist_to_find <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;86-75-30-98-67-53&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;01-23-45-67-89-0A&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;C0-FF-EE-C0-FF-EE&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;89-46-C3-69-D8-D4&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> mac_address <span style="color:#f92672">in</span> maclist_to_find:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> mac_address <span style="color:#f92672">in</span> known_mac_addresses:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Found </span><span style="color:#e6db74">{</span>mac_address<span style="color:#e6db74">}</span><span style="color:#e6db74"> in list of known MAC addresses!&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;* Could not find </span><span style="color:#e6db74">{</span>mac_address<span style="color:#e6db74">}</span><span style="color:#e6db74"> in list of known MAC addresses.&#34;</span>)
</span></span></code></pre></div><p>Again, let&rsquo;s focus on a specific line from the above example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> mac_address <span style="color:#f92672">in</span> maclist_to_find:
</span></span></code></pre></div><p>By using the <strong>for</strong> loop, the above code will &ldquo;walk&rdquo; through the list <em>maclist_to_find</em> and compare each individual item in it (that is, each desired MAC address) against the initial list of known MAC addresses.</p>
<p>Running the example code above will produce the following result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Found <span style="color:#ae81ff">86</span><span style="color:#f92672">-</span><span style="color:#ae81ff">75</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#f92672">-</span><span style="color:#ae81ff">98</span><span style="color:#f92672">-</span><span style="color:#ae81ff">67</span><span style="color:#f92672">-</span><span style="color:#ae81ff">53</span> <span style="color:#f92672">in</span> list of known MAC addresses<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span>Found <span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">23</span><span style="color:#f92672">-</span><span style="color:#ae81ff">45</span><span style="color:#f92672">-</span><span style="color:#ae81ff">67</span><span style="color:#f92672">-</span><span style="color:#ae81ff">89</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0</span>A <span style="color:#f92672">in</span> list of known MAC addresses<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Could <span style="color:#f92672">not</span> find C0<span style="color:#f92672">-</span>FF<span style="color:#f92672">-</span>EE<span style="color:#f92672">-</span>C0<span style="color:#f92672">-</span>FF<span style="color:#f92672">-</span>EE <span style="color:#f92672">in</span> list of known MAC addresses<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>Found <span style="color:#ae81ff">89</span><span style="color:#f92672">-</span><span style="color:#ae81ff">46</span><span style="color:#f92672">-</span>C3<span style="color:#f92672">-</span><span style="color:#ae81ff">69</span><span style="color:#f92672">-</span>D8<span style="color:#f92672">-</span>D4 <span style="color:#f92672">in</span> list of known MAC addresses<span style="color:#960050;background-color:#1e0010">!</span>
</span></span></code></pre></div><h3 id="conclusion">Conclusion</h3>
<p>Hopefully, these simple examples show just how easy Python makes it to start working with text-based data (particularly <em>strings</em> and <em>lists</em>) with a combination of simple syntax, such as <strong>&ldquo;in&rdquo;</strong>, and using <strong>for</strong> loops. Automate away!</p>
]]></content>
        </item>
        
    </channel>
</rss>
