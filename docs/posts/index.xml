<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Matt&#39;s Networking Blog</title>
        <link>https://mattpetty.github.io/posts/</link>
        <description>Recent content in Posts on Matt&#39;s Networking Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 18 Jun 2022 21:59:23 -0400</lastBuildDate>
        <atom:link href="https://mattpetty.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Python&#39;s ipaddress Module</title>
            <link>https://mattpetty.github.io/2022/06/18/pythons-ipaddress-module/</link>
            <pubDate>Sat, 18 Jun 2022 21:59:23 -0400</pubDate>
            
            <guid>https://mattpetty.github.io/2022/06/18/pythons-ipaddress-module/</guid>
            <description>Introduction (some familiarity with Python is assumed for this article)
Since version 3.3 (released September 2012), Python has included an ipaddress module as part of its standard library (that is, it&amp;rsquo;s included as part of any default Python 3.3+ installation). For a network engineer, this can be a remarkably useful and easy way to work with IP addresses and subnets in Python.
The official documentation is here, but read on for a basic summary of this module and some helpful uses for it.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><em>(some familiarity with Python is assumed for this article)</em></p>
<p>Since version 3.3 (released September 2012), Python has included an <strong>ipaddress</strong> module as part of its standard library (that is, it&rsquo;s included as part of any default Python 3.3+ installation). For a network engineer, this can be a remarkably useful and easy way to work with IP addresses and subnets in Python.</p>
<p>The official documentation is <a href="https://docs.python.org/3/library/ipaddress.html">here</a>, but read on for a basic summary of this module and some helpful uses for it.</p>
<h2 id="importing">Importing</h2>
<p>Since <strong>ipaddress</strong> is part of the standard library, to utilize it, it&rsquo;s as simple as starting a new Python script (or REPL) and doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> ipaddress
</span></span></code></pre></div><p>Once imported, this gives you access to a number of different classes that can (for example) test whether a given address falls within a given subnet, or if an IP address is valid IPv4.</p>
<h2 id="so-how-do-i-use-it">So, how do I use it?</h2>
<p>Sticking with IPv4 for now, let&rsquo;s review the three major &ldquo;classes&rdquo; you&rsquo;ll likely work with using <strong>ipaddress</strong>. Those three are:</p>
<ul>
<li><em>IPv4Address</em></li>
<li><em>IPv4Network</em></li>
<li><em>IPv4Interface</em></li>
</ul>
<h3 id="ipv4address">IPv4Address</h3>
<p>The first, <em>IPv4Address</em>, is fairly self-explanatory, and accepts only individual IP addresses (no subnet/CIDR masks):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> ipaddress
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.9&#39;</span>)
</span></span></code></pre></div><p>So what good does this do?</p>
<p>First, it allows you to use addition and subtraction to easily increase or decrease the IP address object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.9&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.10&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.1&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;192.0.2.9&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">33</span>
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.42&#39;</span>)
</span></span></code></pre></div><p>For another use case, imagine you have a list of data, possibly a list of hostnames and IP addresses, or a list of IP address data of unknown validity. If you want to quickly filter this data out to just valid IP addresses, you can do something as simple as the following example (conveniently, you can get the &ldquo;plain-text&rdquo; representation of any <strong>ipaddress</strong> object by calling the <em>str()</em> function on it):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sus_ip_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;100.111.222.3&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;dns.google&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;8.8.8.8&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;172.16.1.1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;192.0.2.42&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;198.51.100.42&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;203.0.113.42&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;would you like a toasted tea-cake?&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>valid_ip_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> maybe_ip <span style="color:#f92672">in</span> sus_ip_list:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    valid_ip <span style="color:#f92672">=</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(maybe_ip)
</span></span><span style="display:flex;"><span>    valid_ip_list<span style="color:#f92672">.</span>append(str(valid_ip))
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">except</span> ipaddress<span style="color:#f92672">.</span>AddressValueError:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Error: &#34;</span><span style="color:#e6db74">{</span>maybe_ip<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34; is not a valid host IPv4 address&#39;</span>)
</span></span></code></pre></div><p>Running the above code produces the following result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Error: <span style="color:#e6db74">&#34;dns.google&#34;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> a valid host IPv4 address
</span></span><span style="display:flex;"><span>Error: <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> a valid host IPv4 address
</span></span><span style="display:flex;"><span>Error: <span style="color:#e6db74">&#34;would you like a toasted tea-cake?&#34;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> a valid host IPv4 address
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> valid_ip_list
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;100.111.222.3&#39;</span>, <span style="color:#e6db74">&#39;8.8.8.8&#39;</span>, <span style="color:#e6db74">&#39;172.16.1.1&#39;</span>, <span style="color:#e6db74">&#39;192.0.2.42&#39;</span>, <span style="color:#e6db74">&#39;198.51.100.42&#39;</span>, <span style="color:#e6db74">&#39;203.0.113.42&#39;</span>]
</span></span></code></pre></div><p>Additionally, there are some attributes that allow you to determine what sort of IPv4 address you&rsquo;re dealing with - public, private, multicast, loopback, etc.; or format it as a reverse pointer (PTR) DNS record:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;8.8.8.8&#34;</span>)<span style="color:#f92672">.</span>is_global
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;172.16.1.1&#34;</span>)<span style="color:#f92672">.</span>is_global
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;172.16.1.1&#34;</span>)<span style="color:#f92672">.</span>is_private
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;127.0.0.1&#34;</span>)<span style="color:#f92672">.</span>is_loopback
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Address(<span style="color:#e6db74">&#34;172.16.1.1&#34;</span>)<span style="color:#f92672">.</span>reverse_pointer
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;1.1.16.172.in-addr.arpa&#39;</span>
</span></span></code></pre></div><h3 id="ipv4network">IPv4Network</h3>
<p>The next class, <em>IPv4Network</em>, differs from <em>IPv4Address</em> in that it requires a <em>subnet</em> (in CIDR form) as the input value, as opposed to a single IP address. This means that for the given subnet mask you&rsquo;re passing to <em>IPv4Network</em>, the corresponding IP address must be a network address (i.e. lowest of the subnet).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)
</span></span><span style="display:flex;"><span>IPv4Network(<span style="color:#e6db74">&#39;192.0.2.0/24&#39;</span>)
</span></span></code></pre></div><p>Try to pass a subnet address that isn&rsquo;t the network address, and an exception will be raised:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.1/24&#34;</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;/usr/lib/python3.7/ipaddress.py&#34;</span>, line <span style="color:#ae81ff">1536</span>, <span style="color:#f92672">in</span> __init__
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> has host bits set&#39;</span> <span style="color:#f92672">%</span> self)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ValueError</span>: <span style="color:#ae81ff">192.0.2.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span> has host bits set
</span></span></code></pre></div><p>The <em>IPv4Network</em> class has all the attributes of the <em>IPv4Address</em> class, as well as a few more, many of which return an IPv4Address object, to get information like the subnet&rsquo;s network address (by itself), broadcast address, long-form subnet mask, host (wildcard) mask, etc.</p>
<p><em>(refer to the official docs for more; these are just a few examples)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>network_address
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.0&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>broadcast_address
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;192.0.2.255&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>netmask
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;255.255.255.0&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ipaddress<span style="color:#f92672">.</span>IPv4Network(<span style="color:#e6db74">&#34;192.0.2.0/24&#34;</span>)<span style="color:#f92672">.</span>hostmask
</span></span><span style="display:flex;"><span>IPv4Address(<span style="color:#e6db74">&#39;0.0.0.255&#39;</span>)
</span></span></code></pre></div><p><em>Work in progress</em></p>
]]></content>
        </item>
        
        <item>
            <title>Second Post - Image Testing</title>
            <link>https://mattpetty.github.io/2022/06/17/second-post-image-testing/</link>
            <pubDate>Fri, 17 Jun 2022 12:05:41 -0400</pubDate>
            
            <guid>https://mattpetty.github.io/2022/06/17/second-post-image-testing/</guid>
            <description>Second Post This is a post that&amp;rsquo;s intended to test inserting images into posts. Technical blogs aren&amp;rsquo;t overly helpful without some pretty pictures.
See you next time!</description>
            <content type="html"><![CDATA[<h2 id="second-post">Second Post</h2>
<p><img src="osi_cats.png" alt="Model of OSI layers with cats"></p>
<p>This is a post that&rsquo;s intended to test inserting images into posts. Technical blogs aren&rsquo;t overly helpful without some pretty pictures.</p>
<p><img src="images/mpython.gif" alt="And There Was Much Rejoicing"></p>
<p><strong>See you next time!</strong></p>
]]></content>
        </item>
        
        <item>
            <title>Hello World!</title>
            <link>https://mattpetty.github.io/2022/06/17/hello-world/</link>
            <pubDate>Fri, 17 Jun 2022 11:57:30 -0400</pubDate>
            
            <guid>https://mattpetty.github.io/2022/06/17/hello-world/</guid>
            <description>Journey Into Blogging Hello world! This is the first test post on my blog.</description>
            <content type="html"><![CDATA[<h2 id="journey-into-blogging">Journey Into Blogging</h2>
<p>Hello world! This is the first test post on my blog.</p>
]]></content>
        </item>
        
    </channel>
</rss>
